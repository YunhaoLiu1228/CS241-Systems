Emily Roller and Joowon Kim
Netids: eroller2, joowonk2
CS 241 Fall 2020
Extra Credit Assignment - a history of programming languages

	The history of programming languages starts further back in time than might be expected. While computer programming languages as we 
recognize them today are a product of recent decades, the first programming language actually dates back to 1822 with the invention of the 
difference engine. When English mathematician Charles Babbage first realized in 1812 that many long calculations consisted of tedious series
of actions that needed to be repeated, he realized that such calculations could be done automatically by a machine. His steam-powered 
difference engine was able to perform such calculations via changing the gears that executed the calculations. Thus, the earliest form of a 
programming language, which is defined as “a set of commands, instructions, and other syntax used to create a software program,” was 
actually just physical motion. Though rudimentary, Babbage’s difference machine was a critical advancement in the development of programming 
languages, as the fundamental principles of the machine were adapted in 1942 for the invention of the ENIAC machine, which replaced the 
physical motions with electric signals.
	The next advancements in the development of modern programming languages took place just a few years later in 1945 when mathematician 
John Von Neumann produced two concepts that were critical to making computers much easier to reprogram and therefore more efficient.
The first concept was known as “shared-program technique” and stated that the actual hardware of a computer should be simple, rather than 
needing to be hand-wired for each program. Thus, the computer could be reprogrammed much faster via using complex instructions to control 
the simple hardware. The second concept was equally critical; called “conditional control transfer”, it led to the rise of the notion of 
subroutines, aka smaller code blocks that could be jumped to in any order, rather than just a single set of chronological steps. The second
part of the concept also stated that code should be able to use logical statements such as IF, THEN, and FOR loops to branch to different 
parts of code. During this time, a critical shift from low-level languages like machine code to higher-level languages was occurring, and 
by the 1950s the first popular high-level languages had appeared. The first major language, created in 1957, was FORTRAN, designed for 
scientific computing. Soon after, other high-level languages such as LISP and Algol were created, with Algol in particular leading to the 
rise of formal grammar and smaller languages such as Pascal. These languages, though often flawed in many ways, were key to the improvement 
of other concepts such as debugging, editing, pointer data types, and dynamic variables. However, Pascal and other similar languages would 
soon be overshadowed by the development of C in 1972, which began the first major transition to the major languages of today. C was 
initially developed for the new Unix system being created, enabling it with features such as dynamic variables, multitasking, interrupt 
handling, forking, and strong, low-level input and output. For this reason, C is very commonly used to program operating systems and still 
goes hand-in-hand with Unix.
    However, programming did not stay stagnant there. With the decade coming to a close, Object Oriented Programming was developed. Because 
objects are packages of data that can be manipulated by a programmer, a man by the name of Stroustroup developed extensions to the language 
C, also known as “C With Classes”. Due to its popularity and usage, the extensions were developed into a fully operational language called 
C++, which was released in 1983. This new language was designed to utilize the speed and power of C while implementing the OOP methods and 
run on many different types of machines. Because of its elegant build and ability to manipulate information and hundreds of instances in a 
program, C++ became immensely popular and is now often used in AP Computer Science courses and simulations. 
    In the early 1990s, a language that was special, portable, and could run on many machines was in demand, due to interactive TV becoming
a quick trend and highly desired technology. Due to this, Java was developed. Although interactive TV failed, many believed that Java would 
become a futuristic language and more popular as Netscape licensed Java for use in their internet browser. However, Java did not live up to 
its expectations. Although it had very high expectations and embodied an example of a “good language”, it had optimization problems and 
failed to run programs in an efficient and quick manner. Today, it represents the instructional language of tomorrow, being fully 
object-oriented and implements various techniques such as portability and garbage collection.
    Other languages of today include Visual BASIC, which is a widget-based Microsoft product. This language is often used to create simple 
interfaces that coincide with other Microsoft products with minimal amount of code, but it is possible to create full applications 
with it. Another well-known language is Python, a functional programming language that is becoming one of the most popular languages in 
the world; Python's design philosophy emphasizes code readability with its notable use of significant whitespace.
With programming growing not only as a part of an industry but also as part of a hobby for millions of people around the world, there is no 
doubt that the growth that we see in this paper will continue to be the case for computer science. Technology is always growing and there 
will be a need for improvement in terms of speed, efficiency, and various features; programming languages changing can be a factor in that. 

Sources
https://cs.brown.edu/~adf/programming_languages.html
https://www.jeremymeyers.com/comp#babbage
https://techterms.com/definition/programming_language

